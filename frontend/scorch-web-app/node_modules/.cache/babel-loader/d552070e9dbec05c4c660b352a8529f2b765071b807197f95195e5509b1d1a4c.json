{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\Documents\\\\Scorch\\\\EnterpriseSites\\\\Scorch\\\\scorch-web-app\\\\frontend\\\\scorch-web-app\\\\src\\\\components\\\\Customers\\\\ListView\\\\ListView.js\",\n  _s = $RefreshSig$();\n// ./frontend/src/components/Customers/ListView/ListView.js\nimport React, { useState, useEffect } from 'react';\nimport CustomerListItem from './CustomerListItem';\nimport './ListView.css';\nimport { getCustomerAddressesByClientID } from '../../../api/CustomerAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListView = ({\n  onEdit\n}) => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [expandedCustomerID, setExpandedCustomerID] = useState(null);\n  const fetchCustomers = () => {\n    getCustomerAddressesByClientID(1).then(data => {\n      setCustomers(data);\n      setLoading(false);\n    }).catch(err => {\n      setError(err.message);\n      setLoading(false);\n    });\n  };\n  const refreshCustomersList = () => {\n    setLoading(true); // Set loading to true to show a loading indicator\n    fetchCustomers();\n  };\n  useEffect(() => {\n    // Using ClientID 1 for testing. REMINDER: Make dynamic later.\n    // Only fetch if there's no external data provided\n\n    fetchCustomers();\n  }, [externalCustomers]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customer-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshCustomersList,\n      children: \"Refresh List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), customers.map(customer => /*#__PURE__*/_jsxDEV(CustomerListItem, {\n      customer: customer,\n      isExpanded: customer.CustomerID === selectedCustomerId,\n      onToggle: () => {\n        setSelectedCustomer(customer); // This will now pass the entire customer object with \"CustomerID\" field\n      },\n\n      onEdit: () => onEdit(customer) // Propagate the function\n    }, customer.CustomerID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(ListView, \"cebjfsx2qPaOebIorevfdyf/Ie0=\");\n_c = ListView;\nexport default ListView;\nvar _c;\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"names":["React","useState","useEffect","CustomerListItem","getCustomerAddressesByClientID","jsxDEV","_jsxDEV","ListView","onEdit","_s","customers","setCustomers","loading","setLoading","error","setError","expandedCustomerID","setExpandedCustomerID","fetchCustomers","then","data","catch","err","message","refreshCustomersList","externalCustomers","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","customer","isExpanded","CustomerID","selectedCustomerId","onToggle","setSelectedCustomer","_c","$RefreshReg$"],"sources":["C:/Users/wesle/Documents/Scorch/EnterpriseSites/Scorch/scorch-web-app/frontend/scorch-web-app/src/components/Customers/ListView/ListView.js"],"sourcesContent":["// ./frontend/src/components/Customers/ListView/ListView.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport CustomerListItem from './CustomerListItem';\r\nimport './ListView.css';\r\nimport { getCustomerAddressesByClientID } from '../../../api/CustomerAPI';\r\n\r\nconst ListView = ({  onEdit }) => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [loading, setLoading] = useState(true); \r\n    const [error, setError] = useState(null);\r\n    const [expandedCustomerID, setExpandedCustomerID] = useState(null);\r\n\r\n    const fetchCustomers = () => {\r\n        getCustomerAddressesByClientID(1)\r\n            .then(data => {\r\n                setCustomers(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(err => {\r\n                setError(err.message);\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    const refreshCustomersList = () => {\r\n        setLoading(true); // Set loading to true to show a loading indicator\r\n        fetchCustomers();\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Using ClientID 1 for testing. REMINDER: Make dynamic later.\r\n        // Only fetch if there's no external data provided\r\n\r\n            fetchCustomers();\r\n\r\n    }, [externalCustomers]);\r\n\r\n    if (loading) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>Error: {error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"customer-list\">\r\n            <button onClick={refreshCustomersList}>Refresh List</button>\r\n            {customers.map(customer => \r\n                <CustomerListItem \r\n                    key={customer.CustomerID} \r\n                    customer={customer} \r\n                    isExpanded={customer.CustomerID === selectedCustomerId}\r\n                    onToggle={() => {\r\n                        setSelectedCustomer(customer);  // This will now pass the entire customer object with \"CustomerID\" field\r\n                    }}\r\n                    onEdit={() => onEdit(customer)}  // Propagate the function\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListView;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,gBAAgB;AACvB,SAASC,8BAA8B,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,QAAQ,GAAGA,CAAC;EAAGC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAElE,MAAMiB,cAAc,GAAGA,CAAA,KAAM;IACzBd,8BAA8B,CAAC,CAAC,CAAC,CAC5Be,IAAI,CAACC,IAAI,IAAI;MACVT,YAAY,CAACS,IAAI,CAAC;MAClBP,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDQ,KAAK,CAACC,GAAG,IAAI;MACVP,QAAQ,CAACO,GAAG,CAACC,OAAO,CAAC;MACrBV,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACV,CAAC;EAED,MAAMW,oBAAoB,GAAGA,CAAA,KAAM;IAC/BX,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBK,cAAc,CAAC,CAAC;EACpB,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZ;IACA;;IAEIgB,cAAc,CAAC,CAAC;EAExB,CAAC,EAAE,CAACO,iBAAiB,CAAC,CAAC;EAEvB,IAAIb,OAAO,EAAE;IACT,oBAAON,OAAA;MAAAoB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;EAEA,IAAIhB,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAoB,QAAA,GAAG,SAAO,EAACZ,KAAK;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EAEA,oBACIxB,OAAA;IAAKyB,SAAS,EAAC,eAAe;IAAAL,QAAA,gBAC1BpB,OAAA;MAAQ0B,OAAO,EAAER,oBAAqB;MAAAE,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC3DpB,SAAS,CAACuB,GAAG,CAACC,QAAQ,iBACnB5B,OAAA,CAACH,gBAAgB;MAEb+B,QAAQ,EAAEA,QAAS;MACnBC,UAAU,EAAED,QAAQ,CAACE,UAAU,KAAKC,kBAAmB;MACvDC,QAAQ,EAAEA,CAAA,KAAM;QACZC,mBAAmB,CAACL,QAAQ,CAAC,CAAC,CAAE;MACpC,CAAE;;MACF1B,MAAM,EAAEA,CAAA,KAAMA,MAAM,CAAC0B,QAAQ,CAAE,CAAE;IAAA,GAN5BA,QAAQ,CAACE,UAAU;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAO3B,CACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAArB,EAAA,CAvDKF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAyDd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}