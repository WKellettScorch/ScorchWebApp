{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\Documents\\\\Scorch\\\\EnterpriseSites\\\\Scorch\\\\scorch-web-app\\\\frontend\\\\scorch-web-app\\\\src\\\\components\\\\Navbars\\\\SideNavBar\\\\SideNavBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'; // Import PropTypes\nimport './SideNavBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SideNavBar = ({\n  isNavVisible,\n  toggleNavVisibility\n}) => {\n  _s();\n  const [selectedNavItem, setSelectedNavItem] = useState('Home');\n  const handleNavItemClick = item => {\n    setSelectedNavItem(item);\n    // Close the side nav bar when an item is clicked\n    toggleNavVisibility();\n  };\n  const navItems = [{\n    label: 'Home',\n    route: '/home'\n  }, {\n    label: 'Customers',\n    route: '/customers'\n  }, {\n    label: 'Jobs',\n    route: '/jobs'\n  }, {\n    label: 'Google Reviews',\n    route: '/GoogleReviewsView'\n  }, {\n    label: 'Image Uploader',\n    route: '/ImageUploaderView'\n  }, {\n    label: 'Settings',\n    route: '/SettingsView'\n  }, {\n    label: 'Log Out',\n    route: '/LogOutView'\n  }\n  // Add other items as needed\n  ];\n\n  // Use an effect to add an event listener to the document\n  useEffect(() => {\n    const handleOutsideClick = event => {\n      if (isNavVisible && !event.target.closest('.sideNavBar')) {\n        toggleNavVisibility();\n      }\n    };\n    document.addEventListener('mousedown', handleOutsideClick);\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, [isNavVisible, toggleNavVisibility]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `sideNavBar ${isNavVisible ? 'sideBarOpen' : ''}`,\n    children: [console.log(\"sideNavBar.js : \" + isNavVisible), navItems.map((item, index) => /*#__PURE__*/_jsxDEV(Link, {\n      to: item.route,\n      className: `navItem ${selectedNavItem === item.label ? 'selected' : ''}`,\n      onClick: () => handleNavItemClick(item.label),\n      children: item.label\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n// Add prop types validation\n_s(SideNavBar, \"6h/XUcsbi1BcXkUHXrgbmUwVX0s=\");\n_c = SideNavBar;\nSideNavBar.propTypes = {\n  isNavVisible: PropTypes.bool.isRequired,\n  toggleNavVisibility: PropTypes.func.isRequired\n};\nexport default SideNavBar;\nvar _c;\n$RefreshReg$(_c, \"SideNavBar\");","map":{"version":3,"names":["React","useState","useEffect","Link","PropTypes","jsxDEV","_jsxDEV","SideNavBar","isNavVisible","toggleNavVisibility","_s","selectedNavItem","setSelectedNavItem","handleNavItemClick","item","navItems","label","route","handleOutsideClick","event","target","closest","document","addEventListener","removeEventListener","className","children","console","log","map","index","to","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","isRequired","func","$RefreshReg$"],"sources":["C:/Users/wesle/Documents/Scorch/EnterpriseSites/Scorch/scorch-web-app/frontend/scorch-web-app/src/components/Navbars/SideNavBar/SideNavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types'; // Import PropTypes\r\nimport './SideNavBar.css';\r\n\r\nconst SideNavBar = ({ isNavVisible, toggleNavVisibility }) => {\r\n    const [selectedNavItem, setSelectedNavItem] = useState('Home');\r\n\r\n    const handleNavItemClick = (item) => {\r\n        setSelectedNavItem(item);\r\n        // Close the side nav bar when an item is clicked\r\n        toggleNavVisibility();\r\n    };\r\n\r\n    const navItems = [\r\n        { label: 'Home', route: '/home' },\r\n        { label: 'Customers', route: '/customers' },\r\n        { label: 'Jobs', route: '/jobs' },\r\n        { label: 'Google Reviews', route: '/GoogleReviewsView' },\r\n        { label: 'Image Uploader', route: '/ImageUploaderView' },\r\n        { label: 'Settings', route: '/SettingsView' },\r\n        { label: 'Log Out', route: '/LogOutView' },\r\n        // Add other items as needed\r\n    ];\r\n\r\n    // Use an effect to add an event listener to the document\r\n    useEffect(() => {\r\n        const handleOutsideClick = (event) => {\r\n            if (isNavVisible && !event.target.closest('.sideNavBar')) {\r\n                toggleNavVisibility();\r\n            }\r\n        };\r\n\r\n        document.addEventListener('mousedown', handleOutsideClick);\r\n        return () => {\r\n            document.removeEventListener('mousedown', handleOutsideClick);\r\n        };\r\n    }, [isNavVisible, toggleNavVisibility]);\r\n\r\n    return (\r\n        <div className={`sideNavBar ${isNavVisible ? 'sideBarOpen' : ''}`}>\r\n            {console.log(\"sideNavBar.js : \" + isNavVisible)}\r\n            {navItems.map((item, index) => (\r\n                <Link\r\n                    key={index}\r\n                    to={item.route}\r\n                    className={`navItem ${selectedNavItem === item.label ? 'selected' : ''}`}\r\n                    onClick={() => handleNavItemClick(item.label)}\r\n                >\r\n                    {item.label}\r\n                </Link>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Add prop types validation\r\nSideNavBar.propTypes = {\r\n    isNavVisible: PropTypes.bool.isRequired,\r\n    toggleNavVisibility: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SideNavBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,SAAS,MAAM,YAAY,CAAC,CAAC;AACpC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,MAAM,CAAC;EAE9D,MAAMY,kBAAkB,GAAIC,IAAI,IAAK;IACjCF,kBAAkB,CAACE,IAAI,CAAC;IACxB;IACAL,mBAAmB,CAAC,CAAC;EACzB,CAAC;EAED,MAAMM,QAAQ,GAAG,CACb;IAAEC,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACjC;IAAED,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAa,CAAC,EAC3C;IAAED,KAAK,EAAE,MAAM;IAAEC,KAAK,EAAE;EAAQ,CAAC,EACjC;IAAED,KAAK,EAAE,gBAAgB;IAAEC,KAAK,EAAE;EAAqB,CAAC,EACxD;IAAED,KAAK,EAAE,gBAAgB;IAAEC,KAAK,EAAE;EAAqB,CAAC,EACxD;IAAED,KAAK,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAgB,CAAC,EAC7C;IAAED,KAAK,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAc;EACzC;EAAA,CACH;;EAED;EACAf,SAAS,CAAC,MAAM;IACZ,MAAMgB,kBAAkB,GAAIC,KAAK,IAAK;MAClC,IAAIX,YAAY,IAAI,CAACW,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,aAAa,CAAC,EAAE;QACtDZ,mBAAmB,CAAC,CAAC;MACzB;IACJ,CAAC;IAEDa,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEL,kBAAkB,CAAC;IAC1D,OAAO,MAAM;MACTI,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IACjE,CAAC;EACL,CAAC,EAAE,CAACV,YAAY,EAAEC,mBAAmB,CAAC,CAAC;EAEvC,oBACIH,OAAA;IAAKmB,SAAS,EAAG,cAAajB,YAAY,GAAG,aAAa,GAAG,EAAG,EAAE;IAAAkB,QAAA,GAC7DC,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGpB,YAAY,CAAC,EAC9CO,QAAQ,CAACc,GAAG,CAAC,CAACf,IAAI,EAAEgB,KAAK,kBACtBxB,OAAA,CAACH,IAAI;MAED4B,EAAE,EAAEjB,IAAI,CAACG,KAAM;MACfQ,SAAS,EAAG,WAAUd,eAAe,KAAKG,IAAI,CAACE,KAAK,GAAG,UAAU,GAAG,EAAG,EAAE;MACzEgB,OAAO,EAAEA,CAAA,KAAMnB,kBAAkB,CAACC,IAAI,CAACE,KAAK,CAAE;MAAAU,QAAA,EAE7CZ,IAAI,CAACE;IAAK,GALNc,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMR,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;;AAED;AAAA1B,EAAA,CAnDMH,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAoDhBA,UAAU,CAAC+B,SAAS,GAAG;EACnB9B,YAAY,EAAEJ,SAAS,CAACmC,IAAI,CAACC,UAAU;EACvC/B,mBAAmB,EAAEL,SAAS,CAACqC,IAAI,CAACD;AACxC,CAAC;AAED,eAAejC,UAAU;AAAC,IAAA8B,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}