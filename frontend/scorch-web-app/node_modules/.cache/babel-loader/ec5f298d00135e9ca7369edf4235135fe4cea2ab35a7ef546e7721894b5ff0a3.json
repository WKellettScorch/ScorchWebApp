{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\Documents\\\\Scorch\\\\EnterpriseSites\\\\Scorch\\\\scorch-web-app\\\\frontend\\\\scorch-web-app\\\\src\\\\components\\\\Customers\\\\ListView\\\\ListView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CustomerListItem from './CustomerListItem';\nimport './ListView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListView = ({\n  customers: externalCustomers\n}) => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [expandedCustomerID, setExpandedCustomerID] = useState(null);\n  useEffect(() => {\n    // Using ClientID 1 for testing. REMINDER: Make dynamic later.\n    // Only fetch if there's no external data provided\n    if (externalCustomers.length === 0) {\n      getCustomerAddressesByClientID(1).then(data => {\n        setCustomers(data);\n        setLoading(false);\n      }).catch(err => {\n        setError(err.message);\n        setLoading(false);\n      });\n    } else {\n      setCustomers(externalCustomers);\n      setLoading(false);\n    }\n  }, [externalCustomers]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customer-list\",\n    children: customers.map(customer => /*#__PURE__*/_jsxDEV(CustomerListItem, {\n      customer: customer\n    }, customer.CustomerID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 40\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(ListView, \"cebjfsx2qPaOebIorevfdyf/Ie0=\");\n_c = ListView;\nexport default ListView;\nvar _c;\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"names":["React","useState","useEffect","CustomerListItem","jsxDEV","_jsxDEV","ListView","customers","externalCustomers","_s","setCustomers","loading","setLoading","error","setError","expandedCustomerID","setExpandedCustomerID","length","getCustomerAddressesByClientID","then","data","catch","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","customer","CustomerID","_c","$RefreshReg$"],"sources":["C:/Users/wesle/Documents/Scorch/EnterpriseSites/Scorch/scorch-web-app/frontend/scorch-web-app/src/components/Customers/ListView/ListView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CustomerListItem from './CustomerListItem';\r\nimport './ListView.css';\r\n\r\nconst ListView = ({ customers: externalCustomers }) => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [loading, setLoading] = useState(true); \r\n    const [error, setError] = useState(null);\r\n    const [expandedCustomerID, setExpandedCustomerID] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Using ClientID 1 for testing. REMINDER: Make dynamic later.\r\n        // Only fetch if there's no external data provided\r\n        if (externalCustomers.length === 0) {\r\n            getCustomerAddressesByClientID(1)\r\n                .then(data => {\r\n                    setCustomers(data);\r\n                    setLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    setError(err.message);\r\n                    setLoading(false);\r\n                });\r\n        } else {\r\n            setCustomers(externalCustomers);\r\n            setLoading(false);\r\n        }\r\n    }, [externalCustomers]);\r\n\r\n    if (loading) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>Error: {error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"customer-list\">\r\n            {customers.map(customer => <CustomerListItem key={customer.CustomerID} customer={customer} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListView;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,SAAS,EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACF,SAAS,EAAEG,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAElEC,SAAS,CAAC,MAAM;IACZ;IACA;IACA,IAAIM,iBAAiB,CAACS,MAAM,KAAK,CAAC,EAAE;MAChCC,8BAA8B,CAAC,CAAC,CAAC,CAC5BC,IAAI,CAACC,IAAI,IAAI;QACVV,YAAY,CAACU,IAAI,CAAC;QAClBR,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,CACDS,KAAK,CAACC,GAAG,IAAI;QACVR,QAAQ,CAACQ,GAAG,CAACC,OAAO,CAAC;QACrBX,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC;IACV,CAAC,MAAM;MACHF,YAAY,CAACF,iBAAiB,CAAC;MAC/BI,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACJ,iBAAiB,CAAC,CAAC;EAEvB,IAAIG,OAAO,EAAE;IACT,oBAAON,OAAA;MAAAmB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;EAEA,IAAIf,KAAK,EAAE;IACP,oBAAOR,OAAA;MAAAmB,QAAA,GAAG,SAAO,EAACX,KAAK;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EAEA,oBACIvB,OAAA;IAAKwB,SAAS,EAAC,eAAe;IAAAL,QAAA,EACzBjB,SAAS,CAACuB,GAAG,CAACC,QAAQ,iBAAI1B,OAAA,CAACF,gBAAgB;MAA2B4B,QAAQ,EAAEA;IAAS,GAAxCA,QAAQ,CAACC,UAAU;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7F,CAAC;AAEd,CAAC;AAAAnB,EAAA,CAtCKH,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AAwCd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}