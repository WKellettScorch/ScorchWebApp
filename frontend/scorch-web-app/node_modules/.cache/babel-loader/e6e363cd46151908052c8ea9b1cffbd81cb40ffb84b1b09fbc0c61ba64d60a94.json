{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wesle\\\\Documents\\\\Scorch\\\\EnterpriseSites\\\\Scorch\\\\scorch-web-app\\\\frontend\\\\scorch-web-app\\\\src\\\\components\\\\Customers\\\\ListView\\\\ListView.js\",\n  _s = $RefreshSig$();\n// ./frontend/src/components/Customers/ListView/ListView.js\nimport React, { useState, useEffect } from 'react';\nimport CustomerListItem from './CustomerListItem';\nimport './ListView.css';\nimport { getCustomerAddressesByClientID } from '../../../api/CustomerAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListView = () => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  useEffect(() => {\n    // Using ClientID 1 for testing. REMINDER: Make dynamic later.\n    getCustomerAddressesByClientID(1).then(data => {\n      setCustomers(data);\n      setLoading(false); // Set loading to false once data is fetched\n    }).catch(err => {\n      setError(err.message);\n      setLoading(false); // Set loading to false even in case of error\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customer-list\",\n    children: customers.map(customer => /*#__PURE__*/_jsxDEV(CustomerListItem, {\n      customer: customer\n    }, customer.CustomerID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 40\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(ListView, \"opa7S2/N4Bp1KtfdUvYEskW86Mc=\");\n_c = ListView;\nexport default ListView;\nvar _c;\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"names":["React","useState","useEffect","CustomerListItem","getCustomerAddressesByClientID","jsxDEV","_jsxDEV","ListView","_s","customers","setCustomers","loading","setLoading","error","setError","then","data","catch","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","customer","CustomerID","_c","$RefreshReg$"],"sources":["C:/Users/wesle/Documents/Scorch/EnterpriseSites/Scorch/scorch-web-app/frontend/scorch-web-app/src/components/Customers/ListView/ListView.js"],"sourcesContent":["// ./frontend/src/components/Customers/ListView/ListView.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport CustomerListItem from './CustomerListItem';\r\nimport './ListView.css';\r\nimport { getCustomerAddressesByClientID } from '../../../api/CustomerAPI'; \r\n\r\nconst ListView = () => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [loading, setLoading] = useState(true); // Loading state\r\n    const [error, setError] = useState(null);    // Error state\r\n\r\n    useEffect(() => {\r\n        // Using ClientID 1 for testing. REMINDER: Make dynamic later.\r\n        getCustomerAddressesByClientID(1)\r\n            .then(data => {\r\n                setCustomers(data);\r\n                setLoading(false);  // Set loading to false once data is fetched\r\n            })\r\n            .catch(err => {\r\n                setError(err.message);\r\n                setLoading(false);  // Set loading to false even in case of error\r\n            });\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p>Error: {error}</p>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"customer-list\">\r\n            {customers.map(customer => <CustomerListItem key={customer.CustomerID} customer={customer} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListView;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,gBAAgB;AACvB,SAASC,8BAA8B,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAI;;EAE7CC,SAAS,CAAC,MAAM;IACZ;IACAE,8BAA8B,CAAC,CAAC,CAAC,CAC5BW,IAAI,CAACC,IAAI,IAAI;MACVN,YAAY,CAACM,IAAI,CAAC;MAClBJ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB,CAAC,CAAC,CACDK,KAAK,CAACC,GAAG,IAAI;MACVJ,QAAQ,CAACI,GAAG,CAACC,OAAO,CAAC;MACrBP,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAc,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC5B;EAEA,IAAIX,KAAK,EAAE;IACP,oBAAOP,OAAA;MAAAc,QAAA,GAAG,SAAO,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAChC;EAEA,oBACIlB,OAAA;IAAKmB,SAAS,EAAC,eAAe;IAAAL,QAAA,EACzBX,SAAS,CAACiB,GAAG,CAACC,QAAQ,iBAAIrB,OAAA,CAACH,gBAAgB;MAA2BwB,QAAQ,EAAEA;IAAS,GAAxCA,QAAQ,CAACC,UAAU;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7F,CAAC;AAEd,CAAC;AAAAhB,EAAA,CA/BKD,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AAiCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}